[{"/home/michael/repos/invest-me/client/src/App.js":"1","/home/michael/repos/invest-me/client/src/contexts/Auth.js":"2","/home/michael/repos/invest-me/client/src/components/Login.js":"3","/home/michael/repos/invest-me/client/src/components/Portfolio.js":"4","/home/michael/repos/invest-me/client/src/components/PortfolioStyles.js":"5","/home/michael/repos/invest-me/client/src/AppStyle.js":"6","/home/michael/repos/invest-me/client/src/components/OneStock.js":"7","/home/michael/repos/invest-me/client/src/components/TopStocksTable.js":"8","/home/michael/repos/invest-me/client/src/components/UpdateMoney.js":"9","/home/michael/repos/invest-me/client/src/components/Loading.js":"10","/home/michael/repos/invest-me/client/src/components/GenericDialog.js":"11","/home/michael/repos/invest-me/client/src/components/Footer.js":"12"},{"size":3317,"mtime":1609241727691,"results":"13","hashOfConfig":"14"},{"size":88,"mtime":1607586116384,"results":"15","hashOfConfig":"14"},{"size":5252,"mtime":1609077020211,"results":"16","hashOfConfig":"14"},{"size":11286,"mtime":1609236315942,"results":"17","hashOfConfig":"14"},{"size":817,"mtime":1609095375176,"results":"18","hashOfConfig":"14"},{"size":1672,"mtime":1609241610477,"results":"19","hashOfConfig":"14"},{"size":1713,"mtime":1609156923180,"results":"20","hashOfConfig":"14"},{"size":1415,"mtime":1608908849043,"results":"21","hashOfConfig":"14"},{"size":2407,"mtime":1609228845462,"results":"22","hashOfConfig":"14"},{"size":520,"mtime":1609148214544,"results":"23","hashOfConfig":"14"},{"size":1166,"mtime":1609075720030,"results":"24","hashOfConfig":"14"},{"size":244,"mtime":1609241742571,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1atymq2",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/michael/repos/invest-me/client/src/App.js",[],"/home/michael/repos/invest-me/client/src/contexts/Auth.js",[],"/home/michael/repos/invest-me/client/src/components/Login.js",["52","53"],"/home/michael/repos/invest-me/client/src/components/Portfolio.js",["54","55","56","57","58","59","60","61","62"],"import React, { useState, useCallback, useEffect } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport network from \"../network/index\";\nimport AsyncSelect from \"react-select/async\";\nimport StocksTable from \"./StocksTable\";\nimport { financial } from \"../functions/helpers\";\nimport { useStyles } from \"./PortfolioStyles\";\nimport GenericTable from \"./GenericTable\";\nimport SmallLoading from \"./SmallLoading\";\nimport Loading from \"./Loading\";\nimport AuthApi from \"../contexts/Auth\";\n\nconst usersHeaders = [\n  \"username\",\n  \"BuyingPrice\",\n  \"Current value\",\n  \"Total profit\",\n  \"Yield\",\n];\n\nexport default function Portfolio() {\n  const { userValue } = React.useContext(AuthApi);\n  const [currentUser, setCurrentUser] = userValue;\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n  const [openSell, setOpenSell] = useState(false);\n  const [query, setQuery] = useState(\"\");\n  const [stockToUpdate, setStockToUpdate] = useState(null);\n  const [amount, setAmount] = useState(0);\n  const [price, setPrice] = useState(0);\n  const [value, setValue] = useState(\"\");\n  const [rows, setRows] = useState([]);\n  const [stockSellAmount, setStockSellAmount] = useState(0);\n  const [stockForSell, setStockForSell] = useState(\"\");\n  const [ifNegative, setIfNegative] = useState(false);\n  const [sellPrice, setSellPrice] = useState(0);\n  const [currentAmount, setCurrentAmount] = useState(0);\n  const [buyError, setBuyError] = useState(\"\");\n  const [sellError, setSellError] = useState(\"\");\n  const [userProfit, setUserProfit] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [loadingBuy, setLoadingBuy] = useState(false);\n  const [loadingSell, setLoadingSell] = useState(false);\n\n  const handleClickOpen = useCallback(() => {\n    setOpen(true);\n  }, []);\n\n  const handleCloseSell = useCallback(() => {\n    setOpenSell(false);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    setOpen(false);\n  }, []);\n\n  const fetchAllStocks = async () => {\n    try {\n      const { data } = await network.get(\"/stocks/stocks-array\");\n      // setStocksArray(data);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  useEffect(() => {\n    fetchAllStocks();\n    getUserInfo();\n    getUserPortfolio();\n    fetchUserProfit()\n  }, []);\n\n  // useEffect(() => {\n  //   searchStocks();\n  // }, [query]);\n\n  const getUserInfo = useCallback(async () => {\n    try {\n      const { data } = await network.get(\"/users/info\");\n      setLoading(false);\n      setCurrentUser(data);\n    } catch (err) {\n      console.error(err);\n    }\n  }, []);\n\n  const fetchUserProfit = useCallback(async () => {\n    try {\n      const { data } = await network.get(\"transactions/user-profit\");\n      setUserProfit(data);\n      setLoading(false)\n    } catch (err) {\n      console.error(err);\n    }\n  }, []);\n\n  const getUserPortfolio = useCallback(async () => {\n    try {\n      const { data } = await network.get(\"/transactions\");\n      setRows(data);\n    } catch (err) {\n      console.error(err);\n    }\n  }, []);\n\n  const onAddStock = useCallback(async () => {\n    if (Number(amount) <= 0) {\n      setBuyError(\"Amount error\");\n      setTimeout(() => {\n        setBuyError(\"\");\n      }, 3000);\n      return;\n    }\n    try {\n      const obj = {\n        symbol: stockToUpdate,\n        buyPrice: price,\n        buyAmount: Number(amount),\n      };\n      setLoadingBuy(true);\n      const { data } = await network.post(\"/transactions\", obj);\n      setLoadingBuy(false);\n      getUserInfo();\n      getUserPortfolio();\n      fetchUserProfit()\n      setStockToUpdate(\"\");\n      setPrice(\"\");\n      setAmount(0);\n      setOpen(false);\n    } catch (err) {\n      setBuyError(\"system Error\");\n      setLoadingBuy(false);\n      console.error(err);\n    }\n  }, [stockToUpdate, price, amount]);\n\n  const loadingOption = useCallback(async () => {\n    try {\n      const { data } = await network.get(`/stocks/search?q=${query}`);\n      const mapped = data.map((stock) => ({\n        label: stock.title,\n        symbol: stock.symbol,\n        price: stock.lastRate,\n      }));\n      return mapped;\n    } catch (err) {\n      console.error(err);\n    }\n  }, [query]);\n\n  //remove stock\n  const onSellStock = useCallback(async () => {\n    if (currentAmount - Number(stockSellAmount) < 0) {\n      setSellError(\"Amount error\");\n      setTimeout(() => {\n        setSellError(\"\");\n      }, 3000);\n      return;\n    }\n    try {\n      const obj = {\n        symbol: parseFloat(stockForSell),\n        sellAmount: Number(stockSellAmount),\n        negative: ifNegative,\n        sellPrice: sellPrice,\n      };\n      setLoadingSell(true);\n      const { data } = await network.patch(\"/transactions\", obj);\n      setLoadingSell(false);\n      setStockForSell(\"\");\n      setStockSellAmount(0);\n      getUserInfo();\n      fetchUserProfit()\n      getUserPortfolio();\n      setOpenSell(false);\n    } catch (err) {\n      setLoadingSell(false);\n      setSellError(\"system error\");\n      console.error(err);\n    }\n  }, [sellPrice, ifNegative, stockForSell, stockSellAmount, currentAmount]);\n\n  const onPressSell = useCallback((value) => {\n    setCurrentAmount(value.currentAmount);\n    setStockForSell(value.symbol);\n    setSellPrice(value.lastRate);\n    if (value.yield < 0) {\n      setIfNegative(true);\n    } else {\n      setIfNegative(false);\n    }\n    setOpenSell(true);\n  }, []);\n\n  const handleInputChange = useCallback((value) => {\n    setQuery(value);\n  }, []);\n\n  const handleSelectChange = useCallback((value) => {\n    setStockToUpdate(value.symbol);\n    setPrice(value.price);\n    setValue(value.lable);\n  }, []);\n\n  if (loading) {\n    return <Loading type={\"spin\"} color={\"blue\"} height={333} width={185} />;\n  }\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.moneyBar}>\n        <div>\n          <TextField\n            label=\"Cash\"\n            id=\"outlined-margin-dense\"\n            value={currentUser.cash}\n            className={classes.textField}\n            margin=\"dense\"\n            variant=\"outlined\"\n            type=\"number\"\n          />\n        </div>\n        <div>\n          <TextField\n            label=\"Investments\"\n            id=\"outlined-margin-dense\"\n            value={financial(currentUser.investments)}\n            className={classes.textField}\n            margin=\"dense\"\n            variant=\"outlined\"\n            type=\"number\"\n          />\n        </div>\n      </div>\n      <div>\n        <div className={classes.button}>\n          <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\n            new stock\n          </Button>\n        </div>\n        <Dialog\n          fullWidth=\"true\"\n          open={openSell}\n          onClose={handleCloseSell}\n          aria-labelledby=\"draggable-dialog-title\"\n        >\n          <DialogTitle style={{ cursor: \"move\" }} id=\"draggable-dialog-title\">\n            sell stock\n          </DialogTitle>\n          <DialogContent>\n            <DialogContentText>{sellError}</DialogContentText>\n            <div className={classes.actions}>\n              <TextField\n                id=\"outlined-margin-dense\"\n                value={sellPrice}\n                className={classes.textField}\n                helperText=\"stock sell price\"\n                margin=\"dense\"\n                variant=\"outlined\"\n                type=\"number\"\n                onChange={(e) => setSellPrice(e.target.value)}\n              />\n              <TextField\n                id=\"outlined-margin-dense\"\n                value={stockSellAmount}\n                className={classes.textField}\n                helperText=\"stock sell amount\"\n                margin=\"dense\"\n                variant=\"outlined\"\n                type=\"number\"\n                onChange={(e) => setStockSellAmount(e.target.value)}\n              />\n            </div>\n            {sellError && (\n              <div>\n                <label style={{ color: \"red\" }}>{sellError}</label>\n              </div>\n            )}\n            {loadingSell && <SmallLoading />}\n          </DialogContent>\n\n          <DialogActions>\n            <Button autoFocus onClick={handleCloseSell} color=\"primary\">\n              Cancel\n            </Button>\n            <Button onClick={onSellStock} color=\"primary\">\n              sell stock\n            </Button>\n          </DialogActions>\n        </Dialog>\n        <Dialog\n          fullWidth=\"true\"\n          open={open}\n          onClose={handleClose}\n          aria-labelledby=\"draggable-dialog-title\"\n        >\n          <DialogTitle style={{ cursor: \"move\" }} id=\"draggable-dialog-title\">\n            Add stock\n          </DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              Add new stock to your stock portfolio\n            </DialogContentText>\n            <AsyncSelect\n              cacheOptions\n              defaultOptions\n              hideSelectedOptions={false}\n              cacheOptions\n              // value={stockToUpdate}\n              onChange={handleSelectChange}\n              placeholder={\"slect stock\"}\n              onInputChange={handleInputChange}\n              loadOptions={loadingOption}\n            />\n            <div className={classes.actions}>\n              <TextField\n                id=\"outlined-margin-dense\"\n                value={amount}\n                className={classes.textField}\n                helperText=\"stock amount\"\n                margin=\"dense\"\n                variant=\"outlined\"\n                type=\"number\"\n                onChange={(e) => setAmount(e.target.value)}\n              />\n              <TextField\n                id=\"outlined-margin-dense\"\n                value={price}\n                className={classes.textField}\n                helperText=\"stock buying price\"\n                margin=\"dense\"\n                variant=\"outlined\"\n                type=\"number\"\n                onChange={(e) => setPrice(e.target.value)}\n              />\n            </div>\n          </DialogContent>\n          {buyError && (\n            <div\n              style={{\n                color: \"red\",\n                display: \"flex\",\n                justifyContent: \"center\",\n              }}\n            >\n              <label>{buyError}</label>\n            </div>\n          )}\n          {loadingBuy && <SmallLoading />}\n          <DialogActions>\n            <Button autoFocus onClick={handleClose} color=\"primary\">\n              Cancel\n            </Button>\n            <Button onClick={onAddStock} color=\"primary\">\n              Add stock\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </div>\n      <div className={classes.tableWrapper}>\n        <div className={classes.stocksTable}>\n          <StocksTable tableRows={rows} onPressSell={onPressSell} />\n        </div>\n        <div className={classes.profitTable}>\n          <GenericTable\n            headers={usersHeaders}\n            rows={userProfit}\n            classes={classes}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n",["63","64"],"/home/michael/repos/invest-me/client/src/components/PortfolioStyles.js",["65"],"/home/michael/repos/invest-me/client/src/AppStyle.js",["66"],"/home/michael/repos/invest-me/client/src/components/OneStock.js",["67","68","69","70"],"/home/michael/repos/invest-me/client/src/components/TopStocksTable.js",[],"/home/michael/repos/invest-me/client/src/components/UpdateMoney.js",["71"],"/home/michael/repos/invest-me/client/src/components/Loading.js",[],"/home/michael/repos/invest-me/client/src/components/GenericDialog.js",["72"],"/home/michael/repos/invest-me/client/src/components/Footer.js",[],{"ruleId":"73","severity":1,"message":"74","line":55,"column":10,"nodeType":"75","messageId":"76","endLine":55,"endColumn":21},{"ruleId":"77","severity":1,"message":"78","line":74,"column":6,"nodeType":"79","endLine":74,"endColumn":8,"suggestions":"80"},{"ruleId":"73","severity":1,"message":"81","line":37,"column":10,"nodeType":"75","messageId":"76","endLine":37,"endColumn":15},{"ruleId":"73","severity":1,"message":"82","line":65,"column":15,"nodeType":"75","messageId":"76","endLine":65,"endColumn":19},{"ruleId":"77","severity":1,"message":"83","line":77,"column":6,"nodeType":"79","endLine":77,"endColumn":8,"suggestions":"84"},{"ruleId":"77","severity":1,"message":"85","line":91,"column":6,"nodeType":"79","endLine":91,"endColumn":8,"suggestions":"86"},{"ruleId":"73","severity":1,"message":"82","line":127,"column":15,"nodeType":"75","messageId":"76","endLine":127,"endColumn":19},{"ruleId":"77","severity":1,"message":"87","line":141,"column":6,"nodeType":"79","endLine":141,"endColumn":36,"suggestions":"88"},{"ruleId":"73","severity":1,"message":"82","line":174,"column":15,"nodeType":"75","messageId":"76","endLine":174,"endColumn":19},{"ruleId":"77","severity":1,"message":"87","line":187,"column":6,"nodeType":"79","endLine":187,"endColumn":75,"suggestions":"89"},{"ruleId":"90","severity":1,"message":"91","line":314,"column":15,"nodeType":"92","endLine":314,"endColumn":27},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"73","severity":1,"message":"97","line":1,"column":22,"nodeType":"75","messageId":"76","endLine":1,"endColumn":30},{"ruleId":"73","severity":1,"message":"97","line":1,"column":22,"nodeType":"75","messageId":"76","endLine":1,"endColumn":30},{"ruleId":"73","severity":1,"message":"97","line":5,"column":22,"nodeType":"75","messageId":"76","endLine":5,"endColumn":30},{"ruleId":"77","severity":1,"message":"98","line":37,"column":6,"nodeType":"79","endLine":37,"endColumn":8,"suggestions":"99"},{"ruleId":"77","severity":1,"message":"98","line":48,"column":6,"nodeType":"79","endLine":48,"endColumn":8,"suggestions":"100"},{"ruleId":"77","severity":1,"message":"101","line":53,"column":6,"nodeType":"79","endLine":53,"endColumn":8,"suggestions":"102"},{"ruleId":"77","severity":1,"message":"103","line":42,"column":6,"nodeType":"79","endLine":42,"endColumn":20,"suggestions":"104"},{"ruleId":"73","severity":1,"message":"105","line":3,"column":8,"nodeType":"75","messageId":"76","endLine":3,"endColumn":17},"no-unused-vars","'currentUser' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'setCurrentUser'. Either include them or remove the dependency array.","ArrayExpression",["106"],"'value' is assigned a value but never used.","'data' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fetchUserProfit', 'getUserInfo', and 'getUserPortfolio'. Either include them or remove the dependency array.",["107"],"React Hook useCallback has a missing dependency: 'setCurrentUser'. Either include it or remove the dependency array.",["108"],"React Hook useCallback has missing dependencies: 'fetchUserProfit', 'getUserInfo', and 'getUserPortfolio'. Either include them or remove the dependency array.",["109"],["110"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-native-reassign",["111"],"no-negated-in-lhs",["112"],"'useTheme' is defined but never used.","React Hook useCallback has a missing dependency: 'params.symbol'. Either include it or remove the dependency array.",["113"],["114"],"React Hook useEffect has missing dependencies: 'fetchOneStock' and 'fetchStockMeta'. Either include them or remove the dependency array.",["115"],"React Hook useCallback has missing dependencies: 'getUserInfo' and 'setOpen'. Either include them or remove the dependency array. If 'getUserInfo' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["116"],"'TextField' is defined but never used.",{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},{"desc":"121","fix":"122"},{"desc":"123","fix":"124"},{"desc":"125","fix":"126"},"no-global-assign","no-unsafe-negation",{"desc":"127","fix":"128"},{"desc":"127","fix":"129"},{"desc":"130","fix":"131"},{"desc":"132","fix":"133"},"Update the dependencies array to be: [history, setCurrentUser]",{"range":"134","text":"135"},"Update the dependencies array to be: [fetchUserProfit, getUserInfo, getUserPortfolio]",{"range":"136","text":"137"},"Update the dependencies array to be: [setCurrentUser]",{"range":"138","text":"139"},"Update the dependencies array to be: [amount, stockToUpdate, price, getUserInfo, getUserPortfolio, fetchUserProfit]",{"range":"140","text":"141"},"Update the dependencies array to be: [currentAmount, stockSellAmount, stockForSell, ifNegative, sellPrice, getUserInfo, fetchUserProfit, getUserPortfolio]",{"range":"142","text":"143"},"Update the dependencies array to be: [params.symbol]",{"range":"144","text":"145"},{"range":"146","text":"145"},"Update the dependencies array to be: [fetchOneStock, fetchStockMeta]",{"range":"147","text":"148"},"Update the dependencies array to be: [cashToUpdate, getUserInfo, setOpen]",{"range":"149","text":"150"},[2077,2079],"[history, setCurrentUser]",[2618,2620],"[fetchUserProfit, getUserInfo, getUserPortfolio]",[2914,2916],"[setCurrentUser]",[4102,4132],"[amount, stockToUpdate, price, getUserInfo, getUserPortfolio, fetchUserProfit]",[5327,5396],"[currentAmount, stockSellAmount, stockForSell, ifNegative, sellPrice, getUserInfo, fetchUserProfit, getUserPortfolio]",[1085,1087],"[params.symbol]",[1338,1340],[1412,1414],"[fetchOneStock, fetchStockMeta]",[1346,1360],"[cashToUpdate, getUserInfo, setOpen]"]