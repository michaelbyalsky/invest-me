[{"/home/michael/repos/invest-me/client/src/components/PrivateRoute.js":"1","/home/michael/repos/invest-me/client/src/components/Home.js":"2","/home/michael/repos/invest-me/client/src/reportWebVitals.js":"3","/home/michael/repos/invest-me/client/src/components/NotFound.js":"4","/home/michael/repos/invest-me/client/src/components/Loading.js":"5","/home/michael/repos/invest-me/client/src/components/Header.js":"6","/home/michael/repos/invest-me/client/src/components/SideBar.js":"7","/home/michael/repos/invest-me/client/src/components/BigDataList.js":"8","/home/michael/repos/invest-me/client/src/components/Portfolio.js":"9","/home/michael/repos/invest-me/client/src/components/Competition.js":"10","/home/michael/repos/invest-me/client/src/components/Calculator.js":"11"},{"size":1445,"mtime":1609618497705,"results":"12","hashOfConfig":"13"},{"size":3195,"mtime":1609672776169,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1607532441111,"results":"15","hashOfConfig":"13"},{"size":379,"mtime":1609279764180,"results":"16","hashOfConfig":"13"},{"size":542,"mtime":1609655685436,"results":"17","hashOfConfig":"13"},{"size":5206,"mtime":1609680009980,"results":"18","hashOfConfig":"13"},{"size":2556,"mtime":1609677802138,"results":"19","hashOfConfig":"13"},{"size":3044,"mtime":1609679058318,"results":"20","hashOfConfig":"13"},{"size":11304,"mtime":1609679740132,"results":"21","hashOfConfig":"13"},{"size":2389,"mtime":1609680781656,"results":"22","hashOfConfig":"13"},{"size":5879,"mtime":1609679854110,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1atymq2",{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/michael/repos/invest-me/client/src/components/PrivateRoute.js",["49","50","51","52"],"/home/michael/repos/invest-me/client/src/components/Home.js",["53","54"],"/home/michael/repos/invest-me/client/src/reportWebVitals.js",[],"/home/michael/repos/invest-me/client/src/components/NotFound.js",["55"],"/home/michael/repos/invest-me/client/src/components/Loading.js",[],"/home/michael/repos/invest-me/client/src/components/Header.js",["56","57","58","59","60"],"/home/michael/repos/invest-me/client/src/components/SideBar.js",[],"/home/michael/repos/invest-me/client/src/components/BigDataList.js",["61","62","63","64"],"import { DataGrid } from \"@material-ui/data-grid\";\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport network from \"../network/index\";\nimport _ from \"lodash\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Select from \"react-select\";\nimport { useHistory } from \"react-router-dom\";\nimport Loading from \"./Loading\";\nimport { startCase, camelCase } from \"lodash\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  control: {\n    padding: \"2px\",\n    marginBottom: \"1fr\",\n  },\n  dataGrid: { cursor: \"pointer\", height: 600, width: \"100%\" },\n}));\n\nexport default function BigDataList() {\n  const history = useHistory();\n  const [bigData, setBigData] = useState();\n  const [columns, setColumns] = useState(null);\n  const [options, setOptions] = useState([]);\n  const [selectValues, setSelectValues] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const classes = useStyles();\n\n  const handleCellClick = useCallback((cell) => {\n    history.push(`/one-stock/${cell.row.symbol}`);\n  }, []);\n\n  // const handleClickOpen = useCallback(() => {\n  //   setOpen(true);\n  // }, []);\n\n  // const handleClose = useCallback(() => {\n  //   setOpen(false);\n  // }, []);\n\n  const handleSelectChange = useCallback((e) => {\n    setSelectValues(Array.isArray(e) ? e.map((x) => x.value) : []);\n  }, []);\n\n  const fetchOptions = useCallback(async () => {\n    try {\n      const { data } = await network.get(\"/stocks/periods\");\n      const mapped = data.map((option) => ({\n        label: startCase(option.label),\n        value: option.value,\n      }));\n      setOptions(mapped);\n    } catch (err) {\n      console.error(err);\n    }\n  }, []);\n\n  const fetchBigDataList = useCallback(async () => {\n    try {\n      const { data } = await network.post(\"/stocks/all\", selectValues);\n      const oneStock = data[0];\n      const resColumns = Object.keys(oneStock).map((key, i) => {\n        return {\n          field: key,\n          headerName: _.startCase(key),\n          width: 130,\n        };\n      });\n      setLoading(false);\n      setColumns(resColumns);\n      setBigData(data);\n    } catch (err) {\n      console.error(err);\n    }\n  }, [selectValues]);\n\n  useEffect(() => {\n    fetchOptions();\n    fetchBigDataList();\n  }, []);\n\n  useEffect(() => {\n    fetchBigDataList();\n  }, [selectValues]);\n\n  if (loading) {\n    return <Loading type={\"spin\"} color={\"blue\"} height={333} width={185} />;\n  }\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.control}>\n        <Select\n          isMulti\n          testId=\"bigDataSelect\"\n          name=\"colors\"\n          options={options}\n          onChange={handleSelectChange}\n          className=\"basic-multi-select\"\n          classNamePrefix=\"select\"\n        />\n      </div>\n      <div className={classes.dataGrid}>\n        {bigData && columns && (\n          <DataGrid\n            onCellClick={handleCellClick}\n            rows={bigData}\n            columns={columns}\n            pageSize={20}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n","/home/michael/repos/invest-me/client/src/components/Portfolio.js",["65","66","67","68","69","70","71","72","73"],"import React, { useState, useCallback, useEffect } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport network from \"../network/index\";\nimport AsyncSelect from \"react-select/async\";\nimport StocksTable from \"./StocksTable\";\nimport { financial } from \"../functions/helpers\";\nimport { useStyles } from \"./PortfolioStyles\";\nimport GenericTable from \"./GenericTable\";\nimport SmallLoading from \"./SmallLoading\";\nimport Loading from \"./Loading\";\nimport AuthApi from \"../contexts/Auth\";\n\nconst usersHeaders = [\n  \"username\",\n  \"BuyingPrice\",\n  \"Current value\",\n  \"Total profit\",\n  \"Yield\",\n];\n\nexport default function Portfolio() {\n  const { userValue } = React.useContext(AuthApi);\n  const [currentUser, setCurrentUser] = userValue;\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n  const [openSell, setOpenSell] = useState(false);\n  const [query, setQuery] = useState(\"\");\n  const [stockToUpdate, setStockToUpdate] = useState(null);\n  const [amount, setAmount] = useState(0);\n  const [price, setPrice] = useState(0);\n  const [value, setValue] = useState(\"\");\n  const [rows, setRows] = useState([]);\n  const [stockSellAmount, setStockSellAmount] = useState(0);\n  const [stockForSell, setStockForSell] = useState(\"\");\n  const [ifNegative, setIfNegative] = useState(false);\n  const [sellPrice, setSellPrice] = useState(0);\n  const [currentAmount, setCurrentAmount] = useState(0);\n  const [buyError, setBuyError] = useState(\"\");\n  const [sellError, setSellError] = useState(\"\");\n  const [userProfit, setUserProfit] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [loadingBuy, setLoadingBuy] = useState(false);\n  const [loadingSell, setLoadingSell] = useState(false);\n\n  const handleClickOpen = useCallback(() => {\n    setOpen(true);\n  }, []);\n\n  const handleCloseSell = useCallback(() => {\n    setOpenSell(false);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    setOpen(false);\n  }, []);\n\n  const fetchAllStocks = async () => {\n    try {\n      const { data } = await network.get(\"/stocks/stocks-array\");\n      // setStocksArray(data);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  useEffect(() => {\n    fetchAllStocks();\n    getUserInfo();\n    getUserPortfolio();\n    fetchUserProfit()\n  }, []);\n\n  // useEffect(() => {\n  //   searchStocks();\n  // }, [query]);\n\n  const getUserInfo = useCallback(async () => {\n    try {\n      const { data } = await network.get(\"/users/info\");\n      setLoading(false);\n      setCurrentUser(data);\n    } catch (err) {\n      console.error(err);\n    }\n  }, []);\n\n  const fetchUserProfit = useCallback(async () => {\n    try {\n      const { data } = await network.get(\"transactions/user-profit\");\n      setUserProfit(data);\n      setLoading(false)\n    } catch (err) {\n      console.error(err);\n    }\n  }, []);\n\n  const getUserPortfolio = useCallback(async () => {\n    try {\n      const { data } = await network.get(\"/transactions\");\n      setRows(data);\n    } catch (err) {\n      console.error(err);\n    }\n  }, []);\n\n  const onAddStock = useCallback(async () => {\n    if (Number(amount) <= 0) {\n      setBuyError(\"Amount error\");\n      setTimeout(() => {\n        setBuyError(\"\");\n      }, 3000);\n      return;\n    }\n    try {\n      const obj = {\n        symbol: stockToUpdate,\n        buyPrice: price,\n        buyAmount: Number(amount),\n      };\n      setLoadingBuy(true);\n      const { data } = await network.post(\"/transactions\", obj);\n      setLoadingBuy(false);\n      getUserInfo();\n      getUserPortfolio();\n      fetchUserProfit()\n      setStockToUpdate(\"\");\n      setPrice(\"\");\n      setAmount(0);\n      setOpen(false);\n    } catch (err) {\n      setBuyError(\"system Error\");\n      setLoadingBuy(false);\n      console.error(err);\n    }\n  }, [stockToUpdate, price, amount]);\n\n  const loadingOption = useCallback(async () => {\n    try {\n      const { data } = await network.get(`/stocks/search?q=${query}`);\n      const mapped = data.map((stock) => ({\n        label: stock.title,\n        symbol: stock.symbol,\n        price: stock.lastRate,\n      }));\n      return mapped;\n    } catch (err) {\n      console.error(err);\n    }\n  }, [query]);\n\n  //remove stock\n  const onSellStock = useCallback(async () => {\n    if (currentAmount - Number(stockSellAmount) < 0) {\n      setSellError(\"Amount error\");\n      setTimeout(() => {\n        setSellError(\"\");\n      }, 3000);\n      return;\n    }\n    try {\n      const obj = {\n        symbol: parseFloat(stockForSell),\n        sellAmount: Number(stockSellAmount),\n        negative: ifNegative,\n        sellPrice: sellPrice,\n      };\n      setLoadingSell(true);\n      const { data } = await network.patch(\"/transactions\", obj);\n      setLoadingSell(false);\n      setStockForSell(\"\");\n      setStockSellAmount(0);\n      getUserInfo();\n      fetchUserProfit()\n      getUserPortfolio();\n      setOpenSell(false);\n    } catch (err) {\n      setLoadingSell(false);\n      setSellError(\"system error\");\n      console.error(err);\n    }\n  }, [sellPrice, ifNegative, stockForSell, stockSellAmount, currentAmount]);\n\n  const onPressSell = useCallback((value) => {\n    setCurrentAmount(value.currentAmount);\n    setStockForSell(value.symbol);\n    setSellPrice(value.lastRate);\n    if (value.yield < 0) {\n      setIfNegative(true);\n    } else {\n      setIfNegative(false);\n    }\n    setOpenSell(true);\n  }, []);\n\n  const handleInputChange = useCallback((value) => {\n    setQuery(value);\n  }, []);\n\n  const handleSelectChange = useCallback((value) => {\n    setStockToUpdate(value.symbol);\n    setPrice(value.price);\n    setValue(value.lable);\n  }, []);\n\n  if (loading) {\n    return <Loading type={\"spin\"} color={\"blue\"} height={333} width={185} />;\n  }\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.moneyBar}>\n        <div>\n          <TextField\n            label=\"Cash\"\n            id=\"outlined-margin-dense\"\n            value={currentUser.cash}\n            className={classes.textField}\n            margin=\"dense\"\n            variant=\"outlined\"\n            type=\"number\"\n          />\n        </div>\n        <div>\n          <TextField\n            label=\"Investments\"\n            id=\"outlined-margin-dense\"\n            value={financial(currentUser.investments)}\n            className={classes.textField}\n            margin=\"dense\"\n            variant=\"outlined\"\n            type=\"number\"\n          />\n        </div>\n      </div>\n      <div>\n        <div className={classes.button}>\n          <Button testId=\"newStock\" variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\n            new stock\n          </Button>\n        </div>\n        <Dialog\n          fullWidth=\"true\"\n          open={openSell}\n          onClose={handleCloseSell}\n          aria-labelledby=\"draggable-dialog-title\"\n        >\n          <DialogTitle style={{ cursor: \"move\" }} id=\"draggable-dialog-title\">\n            sell stock\n          </DialogTitle>\n          <DialogContent>\n            <DialogContentText>{sellError}</DialogContentText>\n            <div className={classes.actions}>\n              <TextField\n                id=\"outlined-margin-dense\"\n                value={sellPrice}\n                className={classes.textField}\n                helperText=\"stock sell price\"\n                margin=\"dense\"\n                variant=\"outlined\"\n                type=\"number\"\n                onChange={(e) => setSellPrice(e.target.value)}\n              />\n              <TextField\n                id=\"outlined-margin-dense\"\n                value={stockSellAmount}\n                className={classes.textField}\n                helperText=\"stock sell amount\"\n                margin=\"dense\"\n                variant=\"outlined\"\n                type=\"number\"\n                onChange={(e) => setStockSellAmount(e.target.value)}\n              />\n            </div>\n            {sellError && (\n              <div>\n                <label style={{ color: \"red\" }}>{sellError}</label>\n              </div>\n            )}\n            {loadingSell && <SmallLoading />}\n          </DialogContent>\n\n          <DialogActions>\n            <Button autoFocus onClick={handleCloseSell} color=\"primary\">\n              Cancel\n            </Button>\n            <Button onClick={onSellStock} color=\"primary\">\n              sell stock\n            </Button>\n          </DialogActions>\n        </Dialog>\n        <Dialog\n          fullWidth=\"true\"\n          open={open}\n          onClose={handleClose}\n          aria-labelledby=\"draggable-dialog-title\"\n        >\n          <DialogTitle style={{ cursor: \"move\" }} id=\"draggable-dialog-title\">\n            Add stock\n          </DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              Add new stock to your stock portfolio\n            </DialogContentText>\n            <AsyncSelect\n              cacheOptions\n              defaultOptions\n              hideSelectedOptions={false}\n              cacheOptions\n              // value={stockToUpdate}\n              onChange={handleSelectChange}\n              placeholder={\"slect stock\"}\n              onInputChange={handleInputChange}\n              loadOptions={loadingOption}\n            />\n            <div className={classes.actions}>\n              <TextField\n                id=\"outlined-margin-dense\"\n                value={amount}\n                className={classes.textField}\n                helperText=\"stock amount\"\n                margin=\"dense\"\n                variant=\"outlined\"\n                type=\"number\"\n                onChange={(e) => setAmount(e.target.value)}\n              />\n              <TextField\n                id=\"outlined-margin-dense\"\n                value={price}\n                className={classes.textField}\n                helperText=\"stock buying price\"\n                margin=\"dense\"\n                variant=\"outlined\"\n                type=\"number\"\n                onChange={(e) => setPrice(e.target.value)}\n              />\n            </div>\n          </DialogContent>\n          {buyError && (\n            <div\n              style={{\n                color: \"red\",\n                display: \"flex\",\n                justifyContent: \"center\",\n              }}\n            >\n              <label>{buyError}</label>\n            </div>\n          )}\n          {loadingBuy && <SmallLoading />}\n          <DialogActions>\n            <Button autoFocus onClick={handleClose} color=\"primary\">\n              Cancel\n            </Button>\n            <Button onClick={onAddStock} color=\"primary\">\n              Add stock\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </div>\n      <div className={classes.tableWrapper}>\n        <div className={classes.stocksTable}>\n          <StocksTable tableRows={rows} onPressSell={onPressSell} />\n        </div>\n        <div className={classes.profitTable}>\n          <GenericTable\n            headers={usersHeaders}\n            rows={userProfit}\n            classes={classes}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","/home/michael/repos/invest-me/client/src/components/Competition.js",["74","75"],"import React, { useState, useCallback, useEffect } from \"react\";\nimport network from \"../network/index\";\nimport useStyles from \"./CompetitionStyles\";\nimport StocksTable from \"./StocksTable\";\nimport GenericTable from \"./GenericTable\";\nimport Loading from \"./Loading\";\n\nconst usersHeaders = [\n  \"username\",\n  \"BuyingPrice\",\n  \"Current value\",\n  \"Total profit\",\n  \"Yield\",\n];\n\nexport default function Competition() {\n  const classes = useStyles();\n  const [usersData, setUsersData] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  const fetchPortfolios = useCallback(async () => {\n    try {\n      const { data } = await network.get(\"/transactions/all-portfolios\");\n      const array = Object.entries(data);\n      return array;\n    } catch (err) {\n      console.error(err);\n    }\n  }, []);\n\n  const fetchAllUsersProfit = useCallback(async () => {\n    try {\n      const { data } = await network.get(\"/transactions/all-users-profit\");\n      return data;\n    } catch (err) {\n      console.error(err);\n    }\n  }, []);\n\n  const joinedData = useCallback(async () => {\n    Promise.all([fetchPortfolios(), fetchAllUsersProfit()]).then((ans) => {\n      if (ans[0] === undefined || ans[1] === undefined) {\n        return;\n      }\n      const newArr = [];\n      for (let i = 0; i < ans[0].length; i++) {\n        for (let j = 0; j < ans[1].length; j++) {\n          if (ans[0][i][0] === ans[1][j][\"username\"]) {\n            newArr.push([ans[0][i], [ans[1][j]]]);\n          }\n        }\n      }\n      setUsersData(newArr);\n      setLoading(false);\n    });\n  }, []);\n\n  useEffect(() => {\n    joinedData();\n  }, []);\n\n  if (loading) {\n    return <Loading type={\"spin\"} color={\"blue\"} height={333} width={185} />;\n  }\n\n  return (\n    <div testId=\"competitionContainer\" className={classes.root}>\n      {usersData &&\n        usersData.map((portfolio, i) => (\n          <div className={classes.tableWrapper}>\n            <h3 className={classes.username}>{portfolio[0][0]}</h3>\n            <div className={classes.table}>\n              <StocksTable key={i} tableRows={portfolio[0][1]} />\n            </div>\n            <div className={classes.table}>\n              <GenericTable\n                key={i}\n                headers={usersHeaders}\n                rows={portfolio[1]}\n                classes={classes}\n              />\n            </div>\n          </div>\n        ))}\n    </div>\n  );\n}\n","/home/michael/repos/invest-me/client/src/components/Calculator.js",["76","77","78","79","80","81","82","83"],{"ruleId":"84","severity":1,"message":"85","line":11,"column":10,"nodeType":"86","messageId":"87","endLine":11,"endColumn":21},{"ruleId":"84","severity":1,"message":"88","line":12,"column":10,"nodeType":"86","messageId":"87","endLine":12,"endColumn":17},{"ruleId":"89","severity":1,"message":"90","line":23,"column":6,"nodeType":"91","endLine":23,"endColumn":8,"suggestions":"92"},{"ruleId":"89","severity":1,"message":"93","line":38,"column":6,"nodeType":"91","endLine":38,"endColumn":8,"suggestions":"94"},{"ruleId":"89","severity":1,"message":"95","line":67,"column":6,"nodeType":"91","endLine":67,"endColumn":8,"suggestions":"96"},{"ruleId":"89","severity":1,"message":"97","line":71,"column":6,"nodeType":"91","endLine":71,"endColumn":20,"suggestions":"98"},{"ruleId":"89","severity":1,"message":"99","line":8,"column":6,"nodeType":"91","endLine":8,"endColumn":8,"suggestions":"100"},{"ruleId":"84","severity":1,"message":"101","line":22,"column":16,"nodeType":"86","messageId":"87","endLine":22,"endColumn":23},{"ruleId":"89","severity":1,"message":"90","line":43,"column":6,"nodeType":"91","endLine":43,"endColumn":8,"suggestions":"102"},{"ruleId":"89","severity":1,"message":"99","line":56,"column":6,"nodeType":"91","endLine":56,"endColumn":8,"suggestions":"103"},{"ruleId":"89","severity":1,"message":"104","line":74,"column":6,"nodeType":"91","endLine":74,"endColumn":8,"suggestions":"105"},{"ruleId":"89","severity":1,"message":"106","line":78,"column":6,"nodeType":"91","endLine":78,"endColumn":8,"suggestions":"107"},{"ruleId":"84","severity":1,"message":"108","line":9,"column":21,"nodeType":"86","messageId":"87","endLine":9,"endColumn":30},{"ruleId":"89","severity":1,"message":"99","line":31,"column":6,"nodeType":"91","endLine":31,"endColumn":8,"suggestions":"109"},{"ruleId":"89","severity":1,"message":"110","line":80,"column":6,"nodeType":"91","endLine":80,"endColumn":8,"suggestions":"111"},{"ruleId":"89","severity":1,"message":"112","line":84,"column":6,"nodeType":"91","endLine":84,"endColumn":20,"suggestions":"113"},{"ruleId":"84","severity":1,"message":"114","line":37,"column":10,"nodeType":"86","messageId":"87","endLine":37,"endColumn":15},{"ruleId":"84","severity":1,"message":"115","line":65,"column":15,"nodeType":"86","messageId":"87","endLine":65,"endColumn":19},{"ruleId":"89","severity":1,"message":"116","line":77,"column":6,"nodeType":"91","endLine":77,"endColumn":8,"suggestions":"117"},{"ruleId":"89","severity":1,"message":"90","line":91,"column":6,"nodeType":"91","endLine":91,"endColumn":8,"suggestions":"118"},{"ruleId":"84","severity":1,"message":"115","line":127,"column":15,"nodeType":"86","messageId":"87","endLine":127,"endColumn":19},{"ruleId":"89","severity":1,"message":"119","line":141,"column":6,"nodeType":"91","endLine":141,"endColumn":36,"suggestions":"120"},{"ruleId":"84","severity":1,"message":"115","line":174,"column":15,"nodeType":"86","messageId":"87","endLine":174,"endColumn":19},{"ruleId":"89","severity":1,"message":"119","line":187,"column":6,"nodeType":"91","endLine":187,"endColumn":75,"suggestions":"121"},{"ruleId":"122","severity":1,"message":"123","line":314,"column":15,"nodeType":"124","endLine":314,"endColumn":27},{"ruleId":"89","severity":1,"message":"125","line":56,"column":6,"nodeType":"91","endLine":56,"endColumn":8,"suggestions":"126"},{"ruleId":"89","severity":1,"message":"127","line":60,"column":6,"nodeType":"91","endLine":60,"endColumn":8,"suggestions":"128"},{"ruleId":"84","severity":1,"message":"129","line":2,"column":22,"nodeType":"86","messageId":"87","endLine":2,"endColumn":30},{"ruleId":"84","severity":1,"message":"130","line":4,"column":8,"nodeType":"86","messageId":"87","endLine":4,"endColumn":19},{"ruleId":"84","severity":1,"message":"131","line":46,"column":10,"nodeType":"86","messageId":"87","endLine":46,"endColumn":15},{"ruleId":"89","severity":1,"message":"132","line":66,"column":6,"nodeType":"91","endLine":66,"endColumn":8,"suggestions":"133"},{"ruleId":"89","severity":1,"message":"134","line":80,"column":6,"nodeType":"91","endLine":80,"endColumn":17,"suggestions":"135"},{"ruleId":"89","severity":1,"message":"136","line":84,"column":6,"nodeType":"91","endLine":84,"endColumn":13,"suggestions":"137"},{"ruleId":"89","severity":1,"message":"136","line":88,"column":6,"nodeType":"91","endLine":88,"endColumn":13,"suggestions":"138"},{"ruleId":"89","severity":1,"message":"139","line":95,"column":5,"nodeType":"91","endLine":95,"endColumn":16,"suggestions":"140"},"no-unused-vars","'currentUser' is assigned a value but never used.","Identifier","unusedVar","'loading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'setCurrentUser'. Either include it or remove the dependency array.","ArrayExpression",["141"],"React Hook useEffect has missing dependencies: 'getUserInfo' and 'history'. Either include them or remove the dependency array.",["142"],"React Hook useEffect has missing dependencies: 'fetchAllUsersProfit', 'fetchOptions', and 'fetchTopStocks'. Either include them or remove the dependency array.",["143"],"React Hook useEffect has a missing dependency: 'fetchTopStocks'. Either include it or remove the dependency array.",["144"],"React Hook useCallback has a missing dependency: 'history'. Either include it or remove the dependency array.",["145"],"'setAuth' is assigned a value but never used.",["146"],["147"],"React Hook useCallback has missing dependencies: 'history' and 'setCurrentUser'. Either include them or remove the dependency array.",["148"],"React Hook useEffect has a missing dependency: 'getUserInfo'. Either include it or remove the dependency array.",["149"],"'camelCase' is defined but never used.",["150"],"React Hook useEffect has missing dependencies: 'fetchBigDataList' and 'fetchOptions'. Either include them or remove the dependency array.",["151"],"React Hook useEffect has a missing dependency: 'fetchBigDataList'. Either include it or remove the dependency array.",["152"],"'value' is assigned a value but never used.","'data' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fetchUserProfit', 'getUserInfo', and 'getUserPortfolio'. Either include them or remove the dependency array.",["153"],["154"],"React Hook useCallback has missing dependencies: 'fetchUserProfit', 'getUserInfo', and 'getUserPortfolio'. Either include them or remove the dependency array.",["155"],["156"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","React Hook useCallback has missing dependencies: 'fetchAllUsersProfit' and 'fetchPortfolios'. Either include them or remove the dependency array.",["157"],"React Hook useEffect has a missing dependency: 'joinedData'. Either include it or remove the dependency array.",["158"],"'useTheme' is defined but never used.","'AsyncSelect' is defined but never used.","'error' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'loadingStockOptions'. Either include it or remove the dependency array.",["159"],"React Hook useEffect has a missing dependency: 'loadingPeriodOptions'. Either include it or remove the dependency array.",["160"],"React Hook useEffect has a missing dependency: 'loadingStockOptions'. Either include it or remove the dependency array.",["161"],["162"],"React Hook useCallback has an unnecessary dependency: 'stockLink'. Either exclude it or remove the dependency array.",["163"],{"desc":"164","fix":"165"},{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},{"desc":"172","fix":"173"},{"desc":"164","fix":"174"},{"desc":"172","fix":"175"},{"desc":"176","fix":"177"},{"desc":"178","fix":"179"},{"desc":"172","fix":"180"},{"desc":"181","fix":"182"},{"desc":"183","fix":"184"},{"desc":"185","fix":"186"},{"desc":"164","fix":"187"},{"desc":"188","fix":"189"},{"desc":"190","fix":"191"},{"desc":"192","fix":"193"},{"desc":"194","fix":"195"},{"desc":"196","fix":"197"},{"desc":"198","fix":"199"},{"desc":"200","fix":"201"},{"desc":"200","fix":"202"},{"desc":"203","fix":"204"},"Update the dependencies array to be: [setCurrentUser]",{"range":"205","text":"206"},"Update the dependencies array to be: [getUserInfo, history]",{"range":"207","text":"208"},"Update the dependencies array to be: [fetchAllUsersProfit, fetchOptions, fetchTopStocks]",{"range":"209","text":"210"},"Update the dependencies array to be: [fetchTopStocks, selectValues]",{"range":"211","text":"212"},"Update the dependencies array to be: [history]",{"range":"213","text":"214"},{"range":"215","text":"206"},{"range":"216","text":"214"},"Update the dependencies array to be: [history, setCurrentUser]",{"range":"217","text":"218"},"Update the dependencies array to be: [getUserInfo]",{"range":"219","text":"220"},{"range":"221","text":"214"},"Update the dependencies array to be: [fetchBigDataList, fetchOptions]",{"range":"222","text":"223"},"Update the dependencies array to be: [fetchBigDataList, selectValues]",{"range":"224","text":"225"},"Update the dependencies array to be: [fetchUserProfit, getUserInfo, getUserPortfolio]",{"range":"226","text":"227"},{"range":"228","text":"206"},"Update the dependencies array to be: [amount, stockToUpdate, price, getUserInfo, getUserPortfolio, fetchUserProfit]",{"range":"229","text":"230"},"Update the dependencies array to be: [currentAmount, stockSellAmount, stockForSell, ifNegative, sellPrice, getUserInfo, fetchUserProfit, getUserPortfolio]",{"range":"231","text":"232"},"Update the dependencies array to be: [fetchAllUsersProfit, fetchPortfolios]",{"range":"233","text":"234"},"Update the dependencies array to be: [joinedData]",{"range":"235","text":"236"},"Update the dependencies array to be: [loadingStockOptions]",{"range":"237","text":"238"},"Update the dependencies array to be: [loadingPeriodOptions, stockLink]",{"range":"239","text":"240"},"Update the dependencies array to be: [loadingStockOptions, query]",{"range":"241","text":"242"},{"range":"243","text":"242"},"Update the dependencies array to be: []",{"range":"244","text":"245"},[817,819],"[setCurrentUser]",[1168,1170],"[getUserInfo, history]",[1821,1823],"[fetchAllUsersProfit, fetchOptions, fetchTopStocks]",[1874,1888],"[fetchTopStocks, selectValues]",[219,221],"[history]",[1631,1633],[1910,1912],[2389,2391],"[history, setCurrentUser]",[2439,2441],"[getUserInfo]",[1039,1041],[2252,2254],"[fetchBigDataList, fetchOptions]",[2307,2321],"[fetchBigDataList, selectValues]",[2618,2620],"[fetchUserProfit, getUserInfo, getUserPortfolio]",[2914,2916],[4102,4132],"[amount, stockToUpdate, price, getUserInfo, getUserPortfolio, fetchUserProfit]",[5327,5396],"[currentAmount, stockSellAmount, stockForSell, ifNegative, sellPrice, getUserInfo, fetchUserProfit, getUserPortfolio]",[1562,1564],"[fetchAllUsersProfit, fetchPortfolios]",[1611,1613],"[joinedData]",[1907,1909],"[loadingStockOptions]",[2243,2254],"[loadingPeriodOptions, stockLink]",[2310,2317],"[loadingStockOptions, query]",[2373,2380],[2524,2535],"[]"]