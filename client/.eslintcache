[{"/home/michael/repos/invest-me/client/src/App.js":"1","/home/michael/repos/invest-me/client/src/contexts/Auth.js":"2","/home/michael/repos/invest-me/client/src/components/Login.js":"3","/home/michael/repos/invest-me/client/src/components/Portfolio.js":"4","/home/michael/repos/invest-me/client/src/components/PortfolioStyles.js":"5","/home/michael/repos/invest-me/client/src/AppStyle.js":"6","/home/michael/repos/invest-me/client/src/components/OneStock.js":"7","/home/michael/repos/invest-me/client/src/components/TopStocksTable.js":"8","/home/michael/repos/invest-me/client/src/components/UpdateMoney.js":"9","/home/michael/repos/invest-me/client/src/components/Loading.js":"10","/home/michael/repos/invest-me/client/src/components/GenericDialog.js":"11","/home/michael/repos/invest-me/client/src/components/Footer.js":"12","/home/michael/repos/invest-me/client/src/components/PrivateRoute.js":"13","/home/michael/repos/invest-me/client/src/components/StocksTable.js":"14","/home/michael/repos/invest-me/client/src/components/CompetitionStyles.js":"15","/home/michael/repos/invest-me/client/src/components/Header.js":"16","/home/michael/repos/invest-me/client/src/components/CircularLoading.js":"17"},{"size":3317,"mtime":1609241727691,"results":"18","hashOfConfig":"19"},{"size":88,"mtime":1607586116384,"results":"20","hashOfConfig":"19"},{"size":5252,"mtime":1609077020211,"results":"21","hashOfConfig":"19"},{"size":11286,"mtime":1609236315942,"results":"22","hashOfConfig":"19"},{"size":817,"mtime":1609095375176,"results":"23","hashOfConfig":"19"},{"size":1672,"mtime":1609241610477,"results":"24","hashOfConfig":"19"},{"size":1713,"mtime":1609156923180,"results":"25","hashOfConfig":"19"},{"size":1415,"mtime":1608908849043,"results":"26","hashOfConfig":"19"},{"size":2407,"mtime":1609228845462,"results":"27","hashOfConfig":"19"},{"size":520,"mtime":1609148214544,"results":"28","hashOfConfig":"19"},{"size":1166,"mtime":1609075720030,"results":"29","hashOfConfig":"19"},{"size":244,"mtime":1609241742571,"results":"30","hashOfConfig":"19"},{"size":1517,"mtime":1609226926252,"results":"31","hashOfConfig":"19"},{"size":3388,"mtime":1609005142397,"results":"32","hashOfConfig":"19"},{"size":564,"mtime":1608652320420,"results":"33","hashOfConfig":"19"},{"size":5106,"mtime":1609274601115,"results":"34","hashOfConfig":"19"},{"size":463,"mtime":1609274592259,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1atymq2",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/michael/repos/invest-me/client/src/App.js",[],"/home/michael/repos/invest-me/client/src/contexts/Auth.js",[],"/home/michael/repos/invest-me/client/src/components/Login.js",["75","76"],"/home/michael/repos/invest-me/client/src/components/Portfolio.js",["77","78","79","80","81","82","83","84","85"],"import React, { useState, useCallback, useEffect } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport network from \"../network/index\";\nimport AsyncSelect from \"react-select/async\";\nimport StocksTable from \"./StocksTable\";\nimport { financial } from \"../functions/helpers\";\nimport { useStyles } from \"./PortfolioStyles\";\nimport GenericTable from \"./GenericTable\";\nimport SmallLoading from \"./SmallLoading\";\nimport Loading from \"./Loading\";\nimport AuthApi from \"../contexts/Auth\";\n\nconst usersHeaders = [\n  \"username\",\n  \"BuyingPrice\",\n  \"Current value\",\n  \"Total profit\",\n  \"Yield\",\n];\n\nexport default function Portfolio() {\n  const { userValue } = React.useContext(AuthApi);\n  const [currentUser, setCurrentUser] = userValue;\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n  const [openSell, setOpenSell] = useState(false);\n  const [query, setQuery] = useState(\"\");\n  const [stockToUpdate, setStockToUpdate] = useState(null);\n  const [amount, setAmount] = useState(0);\n  const [price, setPrice] = useState(0);\n  const [value, setValue] = useState(\"\");\n  const [rows, setRows] = useState([]);\n  const [stockSellAmount, setStockSellAmount] = useState(0);\n  const [stockForSell, setStockForSell] = useState(\"\");\n  const [ifNegative, setIfNegative] = useState(false);\n  const [sellPrice, setSellPrice] = useState(0);\n  const [currentAmount, setCurrentAmount] = useState(0);\n  const [buyError, setBuyError] = useState(\"\");\n  const [sellError, setSellError] = useState(\"\");\n  const [userProfit, setUserProfit] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [loadingBuy, setLoadingBuy] = useState(false);\n  const [loadingSell, setLoadingSell] = useState(false);\n\n  const handleClickOpen = useCallback(() => {\n    setOpen(true);\n  }, []);\n\n  const handleCloseSell = useCallback(() => {\n    setOpenSell(false);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    setOpen(false);\n  }, []);\n\n  const fetchAllStocks = async () => {\n    try {\n      const { data } = await network.get(\"/stocks/stocks-array\");\n      // setStocksArray(data);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  useEffect(() => {\n    fetchAllStocks();\n    getUserInfo();\n    getUserPortfolio();\n    fetchUserProfit()\n  }, []);\n\n  // useEffect(() => {\n  //   searchStocks();\n  // }, [query]);\n\n  const getUserInfo = useCallback(async () => {\n    try {\n      const { data } = await network.get(\"/users/info\");\n      setLoading(false);\n      setCurrentUser(data);\n    } catch (err) {\n      console.error(err);\n    }\n  }, []);\n\n  const fetchUserProfit = useCallback(async () => {\n    try {\n      const { data } = await network.get(\"transactions/user-profit\");\n      setUserProfit(data);\n      setLoading(false)\n    } catch (err) {\n      console.error(err);\n    }\n  }, []);\n\n  const getUserPortfolio = useCallback(async () => {\n    try {\n      const { data } = await network.get(\"/transactions\");\n      setRows(data);\n    } catch (err) {\n      console.error(err);\n    }\n  }, []);\n\n  const onAddStock = useCallback(async () => {\n    if (Number(amount) <= 0) {\n      setBuyError(\"Amount error\");\n      setTimeout(() => {\n        setBuyError(\"\");\n      }, 3000);\n      return;\n    }\n    try {\n      const obj = {\n        symbol: stockToUpdate,\n        buyPrice: price,\n        buyAmount: Number(amount),\n      };\n      setLoadingBuy(true);\n      const { data } = await network.post(\"/transactions\", obj);\n      setLoadingBuy(false);\n      getUserInfo();\n      getUserPortfolio();\n      fetchUserProfit()\n      setStockToUpdate(\"\");\n      setPrice(\"\");\n      setAmount(0);\n      setOpen(false);\n    } catch (err) {\n      setBuyError(\"system Error\");\n      setLoadingBuy(false);\n      console.error(err);\n    }\n  }, [stockToUpdate, price, amount]);\n\n  const loadingOption = useCallback(async () => {\n    try {\n      const { data } = await network.get(`/stocks/search?q=${query}`);\n      const mapped = data.map((stock) => ({\n        label: stock.title,\n        symbol: stock.symbol,\n        price: stock.lastRate,\n      }));\n      return mapped;\n    } catch (err) {\n      console.error(err);\n    }\n  }, [query]);\n\n  //remove stock\n  const onSellStock = useCallback(async () => {\n    if (currentAmount - Number(stockSellAmount) < 0) {\n      setSellError(\"Amount error\");\n      setTimeout(() => {\n        setSellError(\"\");\n      }, 3000);\n      return;\n    }\n    try {\n      const obj = {\n        symbol: parseFloat(stockForSell),\n        sellAmount: Number(stockSellAmount),\n        negative: ifNegative,\n        sellPrice: sellPrice,\n      };\n      setLoadingSell(true);\n      const { data } = await network.patch(\"/transactions\", obj);\n      setLoadingSell(false);\n      setStockForSell(\"\");\n      setStockSellAmount(0);\n      getUserInfo();\n      fetchUserProfit()\n      getUserPortfolio();\n      setOpenSell(false);\n    } catch (err) {\n      setLoadingSell(false);\n      setSellError(\"system error\");\n      console.error(err);\n    }\n  }, [sellPrice, ifNegative, stockForSell, stockSellAmount, currentAmount]);\n\n  const onPressSell = useCallback((value) => {\n    setCurrentAmount(value.currentAmount);\n    setStockForSell(value.symbol);\n    setSellPrice(value.lastRate);\n    if (value.yield < 0) {\n      setIfNegative(true);\n    } else {\n      setIfNegative(false);\n    }\n    setOpenSell(true);\n  }, []);\n\n  const handleInputChange = useCallback((value) => {\n    setQuery(value);\n  }, []);\n\n  const handleSelectChange = useCallback((value) => {\n    setStockToUpdate(value.symbol);\n    setPrice(value.price);\n    setValue(value.lable);\n  }, []);\n\n  if (loading) {\n    return <Loading type={\"spin\"} color={\"blue\"} height={333} width={185} />;\n  }\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.moneyBar}>\n        <div>\n          <TextField\n            label=\"Cash\"\n            id=\"outlined-margin-dense\"\n            value={currentUser.cash}\n            className={classes.textField}\n            margin=\"dense\"\n            variant=\"outlined\"\n            type=\"number\"\n          />\n        </div>\n        <div>\n          <TextField\n            label=\"Investments\"\n            id=\"outlined-margin-dense\"\n            value={financial(currentUser.investments)}\n            className={classes.textField}\n            margin=\"dense\"\n            variant=\"outlined\"\n            type=\"number\"\n          />\n        </div>\n      </div>\n      <div>\n        <div className={classes.button}>\n          <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\n            new stock\n          </Button>\n        </div>\n        <Dialog\n          fullWidth=\"true\"\n          open={openSell}\n          onClose={handleCloseSell}\n          aria-labelledby=\"draggable-dialog-title\"\n        >\n          <DialogTitle style={{ cursor: \"move\" }} id=\"draggable-dialog-title\">\n            sell stock\n          </DialogTitle>\n          <DialogContent>\n            <DialogContentText>{sellError}</DialogContentText>\n            <div className={classes.actions}>\n              <TextField\n                id=\"outlined-margin-dense\"\n                value={sellPrice}\n                className={classes.textField}\n                helperText=\"stock sell price\"\n                margin=\"dense\"\n                variant=\"outlined\"\n                type=\"number\"\n                onChange={(e) => setSellPrice(e.target.value)}\n              />\n              <TextField\n                id=\"outlined-margin-dense\"\n                value={stockSellAmount}\n                className={classes.textField}\n                helperText=\"stock sell amount\"\n                margin=\"dense\"\n                variant=\"outlined\"\n                type=\"number\"\n                onChange={(e) => setStockSellAmount(e.target.value)}\n              />\n            </div>\n            {sellError && (\n              <div>\n                <label style={{ color: \"red\" }}>{sellError}</label>\n              </div>\n            )}\n            {loadingSell && <SmallLoading />}\n          </DialogContent>\n\n          <DialogActions>\n            <Button autoFocus onClick={handleCloseSell} color=\"primary\">\n              Cancel\n            </Button>\n            <Button onClick={onSellStock} color=\"primary\">\n              sell stock\n            </Button>\n          </DialogActions>\n        </Dialog>\n        <Dialog\n          fullWidth=\"true\"\n          open={open}\n          onClose={handleClose}\n          aria-labelledby=\"draggable-dialog-title\"\n        >\n          <DialogTitle style={{ cursor: \"move\" }} id=\"draggable-dialog-title\">\n            Add stock\n          </DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              Add new stock to your stock portfolio\n            </DialogContentText>\n            <AsyncSelect\n              cacheOptions\n              defaultOptions\n              hideSelectedOptions={false}\n              cacheOptions\n              // value={stockToUpdate}\n              onChange={handleSelectChange}\n              placeholder={\"slect stock\"}\n              onInputChange={handleInputChange}\n              loadOptions={loadingOption}\n            />\n            <div className={classes.actions}>\n              <TextField\n                id=\"outlined-margin-dense\"\n                value={amount}\n                className={classes.textField}\n                helperText=\"stock amount\"\n                margin=\"dense\"\n                variant=\"outlined\"\n                type=\"number\"\n                onChange={(e) => setAmount(e.target.value)}\n              />\n              <TextField\n                id=\"outlined-margin-dense\"\n                value={price}\n                className={classes.textField}\n                helperText=\"stock buying price\"\n                margin=\"dense\"\n                variant=\"outlined\"\n                type=\"number\"\n                onChange={(e) => setPrice(e.target.value)}\n              />\n            </div>\n          </DialogContent>\n          {buyError && (\n            <div\n              style={{\n                color: \"red\",\n                display: \"flex\",\n                justifyContent: \"center\",\n              }}\n            >\n              <label>{buyError}</label>\n            </div>\n          )}\n          {loadingBuy && <SmallLoading />}\n          <DialogActions>\n            <Button autoFocus onClick={handleClose} color=\"primary\">\n              Cancel\n            </Button>\n            <Button onClick={onAddStock} color=\"primary\">\n              Add stock\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </div>\n      <div className={classes.tableWrapper}>\n        <div className={classes.stocksTable}>\n          <StocksTable tableRows={rows} onPressSell={onPressSell} />\n        </div>\n        <div className={classes.profitTable}>\n          <GenericTable\n            headers={usersHeaders}\n            rows={userProfit}\n            classes={classes}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n",["86","87"],"/home/michael/repos/invest-me/client/src/components/PortfolioStyles.js",["88"],"/home/michael/repos/invest-me/client/src/AppStyle.js",["89"],"/home/michael/repos/invest-me/client/src/components/OneStock.js",["90","91","92","93"],"/home/michael/repos/invest-me/client/src/components/TopStocksTable.js",[],"/home/michael/repos/invest-me/client/src/components/UpdateMoney.js",["94"],"/home/michael/repos/invest-me/client/src/components/Loading.js",[],"/home/michael/repos/invest-me/client/src/components/GenericDialog.js",["95"],"/home/michael/repos/invest-me/client/src/components/Footer.js",[],"/home/michael/repos/invest-me/client/src/components/PrivateRoute.js",["96","97","98","99"],"import React, { useEffect, useCallback, useState } from \"react\";\nimport { Route, Redirect, useHistory } from \"react-router-dom\";\n// import { useAuth } from '../contexts/AuthContext'\nimport AuthApi from \"../contexts/Auth\";\nimport Cookies from \"js-cookie\";\nimport network from \"../network/index\";\n\nexport default function PrivateRoute({ component: Component, ...rest }) {\n  // const { currentUser } = useAuth()\n  const { userValue } = React.useContext(AuthApi);\n  const [currentUser, setCurrentUser] = userValue;\n  const [loading, setLoading] = useState(true);\n  const history = useHistory();\n\n  const getUserInfo = useCallback(async () => {\n    try {\n      const { data } = await network.get(\"/users/info\");\n      setLoading(false);\n      setCurrentUser(data);\n    } catch (err) {\n      console.error(err);\n    }\n  }, []);\n\n  useEffect(() => {\n    getUserInfo();\n    let rememberMeValue = Cookies.get(\"rememberMe\");\n    let token = Cookies.get(\"accessToken\");\n    if (token && rememberMeValue) {\n      return;\n    } else {\n      Cookies.remove(\"accessToken\");\n      Cookies.remove(\"refreshToken\");\n      Cookies.remove(\"userId\");\n      Cookies.remove(\"username\");\n      Cookies.remove(\"rememberMe\");\n      history.push(\"/login\");\n    }\n  }, []);\n\n  return (\n    <Route\n      {...rest}\n      render={(props) => {\n        return Cookies.get(\"accessToken\") ? (\n          <Component {...props} />\n        ) : (\n          <Redirect\n            to=\"/login\n            \"\n          />\n        );\n      }}\n    ></Route>\n  );\n}\n",["100","101"],"/home/michael/repos/invest-me/client/src/components/StocksTable.js",["102","103","104"],"/home/michael/repos/invest-me/client/src/components/CompetitionStyles.js",[],"/home/michael/repos/invest-me/client/src/components/Header.js",["105","106","107","108","109"],"import Toolbar from \"@material-ui/core/Toolbar\";\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Menu from \"@material-ui/core/Menu\";\nimport AuthApi from \"../contexts/Auth\";\nimport Grid from \"@material-ui/core/Grid\";\nimport React, { useCallback } from \"react\";\nimport clsx from \"clsx\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { useHistory } from \"react-router-dom\";\nimport Cookies from \"js-cookie\";\nimport network from \"../network/index\";\nimport { financial } from \"../functions/helpers\";\nimport { useEffect, useState } from \"react\";\nimport UpdateMoney from \"./UpdateMoney\";\nimport CircleLoading from \"./CircularLoading\";\n\nexport default function Header({ classes, handleDrawerOpen, drawerOpen }) {\n  const [auth, setAuth] = React.useState(true);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const open = Boolean(anchorEl);\n  const { userValue } = React.useContext(AuthApi);\n  const [currentUser, setCurrentUser] = userValue;\n  const [openModal, setOpenModal] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const history = useHistory();\n\n  const getUserInfo = useCallback(async () => {\n    try {\n      setLoading(true);\n      const { data } = await network.get(\"/users/info\");\n      setLoading(false);\n      if (data.cash === 0) {\n        setOpenModal(true);\n      }\n      setCurrentUser(data);\n    } catch (err) {\n      console.error(err);\n    }\n  }, []);\n\n  const handleMenu = useCallback((event) => {\n    setAnchorEl(event.currentTarget);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    setAnchorEl(null);\n  }, []);\n\n  const handleProfile = useCallback(() => {\n    setAnchorEl(null);\n    history.push(\"/profile\");\n  }, []);\n\n  const handleLogout = useCallback(async () => {\n    try {\n      await network.post(\"/auth/logout\", {\n        token: Cookies.get(\"refreshToken\"),\n      });\n      Cookies.remove(\"accessToken\");\n      Cookies.remove(\"userId\");\n      Cookies.remove(\"refreshToken\");\n      Cookies.remove(\"rememberMe\");\n      Cookies.remove(\"username\");\n      setCurrentUser(null);\n      history.push(\"/login\");\n      setAnchorEl(null);\n    } catch (err) {\n      console.error(err);\n    }\n  }, []);\n\n  useEffect(() => {\n    getUserInfo();\n  }, []);\n\n  return (\n    <AppBar\n      position=\"fixed\"\n      className={clsx(classes.appBar, {\n        [classes.appBarShift]: drawerOpen,\n      })}\n    >\n      <Toolbar>\n        <IconButton\n          color=\"inherit\"\n          aria-label=\"open drawer\"\n          onClick={handleDrawerOpen}\n          edge=\"start\"\n          className={clsx(classes.menuButton, drawerOpen && classes.hide)}\n        >\n          <MenuIcon />\n        </IconButton>\n        <Typography variant=\"h6\" className={classes.title}>\n          InvestMe\n        </Typography>\n        {loading ? (\n           <Grid\n           container\n           direction=\"row\"\n           justify=\"center\"\n           alignItems=\"flex-start\"\n         >\n          <CircleLoading />\n          </Grid>\n        ) : (\n          <Grid\n            container\n            direction=\"row\"\n            justify=\"center\"\n            alignItems=\"flex-start\"\n          >\n            <Grid item xs={4} sm={5}>\n              {/* <Typography className={classes.title}>total money</Typography> */}\n            </Grid>\n            <Grid item xs={4} sm={2}>\n              <Typography className={classes.title}>\n                cash: {currentUser.cash}\n              </Typography>\n            </Grid>\n            <Grid item xs={4} sm={2}>\n              <Typography className={classes.title}>\n                investments: {financial(currentUser.investments)}\n              </Typography>\n            </Grid>\n          </Grid>\n        )}\n        {auth && (\n          <div>\n            <IconButton\n              aria-label=\"account of current user\"\n              aria-controls=\"menu-appbar\"\n              aria-haspopup=\"true\"\n              onClick={handleMenu}\n              color=\"inherit\"\n            >\n              <AccountCircle />\n              <Typography>&nbsp;{currentUser.username}</Typography>\n            </IconButton>\n            <Menu\n              id=\"menu-appbar\"\n              anchorEl={anchorEl}\n              anchorOrigin={{\n                vertical: \"top\",\n                horizontal: \"right\",\n              }}\n              keepMounted\n              transformOrigin={{\n                vertical: \"top\",\n                horizontal: \"right\",\n              }}\n              open={open}\n              onClose={handleClose}\n            >\n              <MenuItem onClick={handleLogout}>logout</MenuItem>\n              <MenuItem onClick={handleProfile}>My account</MenuItem>\n            </Menu>\n          </div>\n        )}\n      </Toolbar>\n      {openModal && (\n        <UpdateMoney\n          getUserInfo={getUserInfo}\n          setOpen={setOpenModal}\n          open={openModal}\n        />\n      )}\n    </AppBar>\n    // </div>\n  );\n}\n","/home/michael/repos/invest-me/client/src/components/CircularLoading.js",[],{"ruleId":"110","severity":1,"message":"111","line":55,"column":10,"nodeType":"112","messageId":"113","endLine":55,"endColumn":21},{"ruleId":"114","severity":1,"message":"115","line":74,"column":6,"nodeType":"116","endLine":74,"endColumn":8,"suggestions":"117"},{"ruleId":"110","severity":1,"message":"118","line":37,"column":10,"nodeType":"112","messageId":"113","endLine":37,"endColumn":15},{"ruleId":"110","severity":1,"message":"119","line":65,"column":15,"nodeType":"112","messageId":"113","endLine":65,"endColumn":19},{"ruleId":"114","severity":1,"message":"120","line":77,"column":6,"nodeType":"116","endLine":77,"endColumn":8,"suggestions":"121"},{"ruleId":"114","severity":1,"message":"122","line":91,"column":6,"nodeType":"116","endLine":91,"endColumn":8,"suggestions":"123"},{"ruleId":"110","severity":1,"message":"119","line":127,"column":15,"nodeType":"112","messageId":"113","endLine":127,"endColumn":19},{"ruleId":"114","severity":1,"message":"124","line":141,"column":6,"nodeType":"116","endLine":141,"endColumn":36,"suggestions":"125"},{"ruleId":"110","severity":1,"message":"119","line":174,"column":15,"nodeType":"112","messageId":"113","endLine":174,"endColumn":19},{"ruleId":"114","severity":1,"message":"124","line":187,"column":6,"nodeType":"116","endLine":187,"endColumn":75,"suggestions":"126"},{"ruleId":"127","severity":1,"message":"128","line":314,"column":15,"nodeType":"129","endLine":314,"endColumn":27},{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","replacedBy":"133"},{"ruleId":"110","severity":1,"message":"134","line":1,"column":22,"nodeType":"112","messageId":"113","endLine":1,"endColumn":30},{"ruleId":"110","severity":1,"message":"134","line":1,"column":22,"nodeType":"112","messageId":"113","endLine":1,"endColumn":30},{"ruleId":"110","severity":1,"message":"134","line":5,"column":22,"nodeType":"112","messageId":"113","endLine":5,"endColumn":30},{"ruleId":"114","severity":1,"message":"135","line":37,"column":6,"nodeType":"116","endLine":37,"endColumn":8,"suggestions":"136"},{"ruleId":"114","severity":1,"message":"135","line":48,"column":6,"nodeType":"116","endLine":48,"endColumn":8,"suggestions":"137"},{"ruleId":"114","severity":1,"message":"138","line":53,"column":6,"nodeType":"116","endLine":53,"endColumn":8,"suggestions":"139"},{"ruleId":"114","severity":1,"message":"140","line":42,"column":6,"nodeType":"116","endLine":42,"endColumn":20,"suggestions":"141"},{"ruleId":"110","severity":1,"message":"142","line":3,"column":8,"nodeType":"112","messageId":"113","endLine":3,"endColumn":17},{"ruleId":"110","severity":1,"message":"111","line":11,"column":10,"nodeType":"112","messageId":"113","endLine":11,"endColumn":21},{"ruleId":"110","severity":1,"message":"143","line":12,"column":10,"nodeType":"112","messageId":"113","endLine":12,"endColumn":17},{"ruleId":"114","severity":1,"message":"122","line":23,"column":6,"nodeType":"116","endLine":23,"endColumn":8,"suggestions":"144"},{"ruleId":"114","severity":1,"message":"145","line":39,"column":6,"nodeType":"116","endLine":39,"endColumn":8,"suggestions":"146"},{"ruleId":"130","replacedBy":"147"},{"ruleId":"132","replacedBy":"148"},{"ruleId":"114","severity":1,"message":"149","line":26,"column":6,"nodeType":"116","endLine":26,"endColumn":8,"suggestions":"150"},{"ruleId":"151","severity":1,"message":"152","line":41,"column":17,"nodeType":"153","endLine":45,"endColumn":19},{"ruleId":"151","severity":1,"message":"152","line":49,"column":17,"nodeType":"153","endLine":53,"endColumn":19},{"ruleId":"110","severity":1,"message":"154","line":22,"column":16,"nodeType":"112","messageId":"113","endLine":22,"endColumn":23},{"ruleId":"114","severity":1,"message":"122","line":43,"column":6,"nodeType":"116","endLine":43,"endColumn":8,"suggestions":"155"},{"ruleId":"114","severity":1,"message":"149","line":56,"column":6,"nodeType":"116","endLine":56,"endColumn":8,"suggestions":"156"},{"ruleId":"114","severity":1,"message":"157","line":74,"column":6,"nodeType":"116","endLine":74,"endColumn":8,"suggestions":"158"},{"ruleId":"114","severity":1,"message":"159","line":78,"column":6,"nodeType":"116","endLine":78,"endColumn":8,"suggestions":"160"},"no-unused-vars","'currentUser' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'setCurrentUser'. Either include them or remove the dependency array.","ArrayExpression",["161"],"'value' is assigned a value but never used.","'data' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fetchUserProfit', 'getUserInfo', and 'getUserPortfolio'. Either include them or remove the dependency array.",["162"],"React Hook useCallback has a missing dependency: 'setCurrentUser'. Either include it or remove the dependency array.",["163"],"React Hook useCallback has missing dependencies: 'fetchUserProfit', 'getUserInfo', and 'getUserPortfolio'. Either include them or remove the dependency array.",["164"],["165"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-native-reassign",["166"],"no-negated-in-lhs",["167"],"'useTheme' is defined but never used.","React Hook useCallback has a missing dependency: 'params.symbol'. Either include it or remove the dependency array.",["168"],["169"],"React Hook useEffect has missing dependencies: 'fetchOneStock' and 'fetchStockMeta'. Either include them or remove the dependency array.",["170"],"React Hook useCallback has missing dependencies: 'getUserInfo' and 'setOpen'. Either include them or remove the dependency array. If 'getUserInfo' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["171"],"'TextField' is defined but never used.","'loading' is assigned a value but never used.",["172"],"React Hook useEffect has missing dependencies: 'getUserInfo' and 'history'. Either include them or remove the dependency array.",["173"],["166"],["167"],"React Hook useCallback has a missing dependency: 'history'. Either include it or remove the dependency array.",["174"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'setAuth' is assigned a value but never used.",["175"],["176"],"React Hook useCallback has missing dependencies: 'history' and 'setCurrentUser'. Either include them or remove the dependency array.",["177"],"React Hook useEffect has a missing dependency: 'getUserInfo'. Either include it or remove the dependency array.",["178"],{"desc":"179","fix":"180"},{"desc":"181","fix":"182"},{"desc":"183","fix":"184"},{"desc":"185","fix":"186"},{"desc":"187","fix":"188"},"no-global-assign","no-unsafe-negation",{"desc":"189","fix":"190"},{"desc":"189","fix":"191"},{"desc":"192","fix":"193"},{"desc":"194","fix":"195"},{"desc":"183","fix":"196"},{"desc":"197","fix":"198"},{"desc":"199","fix":"200"},{"desc":"183","fix":"201"},{"desc":"199","fix":"202"},{"desc":"179","fix":"203"},{"desc":"204","fix":"205"},"Update the dependencies array to be: [history, setCurrentUser]",{"range":"206","text":"207"},"Update the dependencies array to be: [fetchUserProfit, getUserInfo, getUserPortfolio]",{"range":"208","text":"209"},"Update the dependencies array to be: [setCurrentUser]",{"range":"210","text":"211"},"Update the dependencies array to be: [amount, stockToUpdate, price, getUserInfo, getUserPortfolio, fetchUserProfit]",{"range":"212","text":"213"},"Update the dependencies array to be: [currentAmount, stockSellAmount, stockForSell, ifNegative, sellPrice, getUserInfo, fetchUserProfit, getUserPortfolio]",{"range":"214","text":"215"},"Update the dependencies array to be: [params.symbol]",{"range":"216","text":"217"},{"range":"218","text":"217"},"Update the dependencies array to be: [fetchOneStock, fetchStockMeta]",{"range":"219","text":"220"},"Update the dependencies array to be: [cashToUpdate, getUserInfo, setOpen]",{"range":"221","text":"222"},{"range":"223","text":"211"},"Update the dependencies array to be: [getUserInfo, history]",{"range":"224","text":"225"},"Update the dependencies array to be: [history]",{"range":"226","text":"227"},{"range":"228","text":"211"},{"range":"229","text":"227"},{"range":"230","text":"207"},"Update the dependencies array to be: [getUserInfo]",{"range":"231","text":"232"},[2077,2079],"[history, setCurrentUser]",[2618,2620],"[fetchUserProfit, getUserInfo, getUserPortfolio]",[2914,2916],"[setCurrentUser]",[4102,4132],"[amount, stockToUpdate, price, getUserInfo, getUserPortfolio, fetchUserProfit]",[5327,5396],"[currentAmount, stockSellAmount, stockForSell, ifNegative, sellPrice, getUserInfo, fetchUserProfit, getUserPortfolio]",[1085,1087],"[params.symbol]",[1338,1340],[1412,1414],"[fetchOneStock, fetchStockMeta]",[1346,1360],"[cashToUpdate, getUserInfo, setOpen]",[817,819],[1240,1242],"[getUserInfo, history]",[916,918],"[history]",[1631,1633],[1910,1912],[2389,2391],[2439,2441],"[getUserInfo]"]